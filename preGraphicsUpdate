graphics/src/GraphicsCamera.cpp:        Vector node_pos;// = control->nodes->getPosition(l_settings->id);
graphics/src/GraphicsCamera.cpp:          Quaternion q(1,0,0,0);// = control->nodes->getRotation(l_settings->id);
scene_loader/src/Save.cpp:      control->nodes->getListNodes(&objList);
scene_loader/src/Save.cpp:        param.v_nodeList.push_back(control->nodes->getFullNode(it->index));
scene_loader/src/Save.cpp:        parentNode = control->nodes->getFullNode(nodeData->relative_id);
scene_loader/src/Load.cpp:        groupIDOffset = control->nodes->getMaxGroupID() + 1;
scene_loader/src/Load.cpp:      //NodeId newId = control->nodes->addNode(&node);      
sim/src/sensors/NodeContactSensor.cpp:        control->nodes->getDataBrokerNames(*it, &groupName, &dataName);
sim/src/sensors/ScanningSonar.cpp:      nodeID[0] = control->nodes->addNode(&ns_fixed);
sim/src/sensors/ScanningSonar.cpp:      nodeID[1] = control->nodes->addNode(&ns_play);
sim/src/sensors/ScanningSonar.cpp:      //bool erg = control->nodes->getDataBrokerNames(attached_node, &groupName, &dataName);
sim/src/sensors/ScanningSonar.cpp:      bool erg = control->nodes->getDataBrokerNames(nodeID[1], &groupName, &dataName);
sim/src/sensors/ScanningSonar.cpp:      control->nodes->addNodeSensor(this);
sim/src/sensors/CameraSensor.cpp:      control->nodes->addNodeSensor(this);
sim/src/sensors/CameraSensor.cpp:      bool erg = control->nodes->getDataBrokerNames(attached_node, &groupName, &dataName);
sim/src/sensors/RayGridSensor.cpp:      control->nodes->addNodeSensor(this->node_id, this->s_cfg);
sim/src/sensors/RayGridSensor.cpp:      control->nodes->getDataBrokerNames(this->node_id, &groupName, &dataName);
sim/src/sensors/RayGridSensor.cpp:      control->nodes->reloadNodeSensor(this->node_id, &(this->s_cfg));
sim/src/sensors/RayGridSensor.cpp:      control->nodes->reloadNodeSensor(this->node_id, &(this->s_cfg));
sim/src/sensors/RayGridSensor.cpp:      control->nodes->reloadNodeSensor(this->node_id, &(this->s_cfg));
sim/src/sensors/NodeCOMSensor.cpp:      Vector center = control->nodes->getCenterOfMass(config.ids);
sim/src/sensors/NodeCOMSensor.cpp:      Vector center = control->nodes->getCenterOfMass(config.ids);
sim/src/sensors/NodeArraySensor.cpp:          control->nodes->getDataBrokerNames(*it, &groupName, &dataName);
sim/src/sensors/Joint6DOFSensor.cpp:      control->nodes->getDataBrokerNames(sensor_data.body_id,
sim/src/sensors/Joint6DOFSensor.cpp:      NodeData theNode = control->nodes->getFullNode(sensor_data.body_id);
sim/src/sensors/RaySensor.cpp:      control->nodes->addNodeSensor(this);
sim/src/sensors/RaySensor.cpp:      bool erg = control->nodes->getDataBrokerNames(attached_node, &groupName, &dataName);
sim/src/sensors/RaySensor.cpp:      position = control->nodes->getPosition(attached_node);
sim/src/sensors/RaySensor.cpp:      orientation = control->nodes->getRotation(attached_node);
sim/src/sensors/RaySensor.cpp:          control->nodes->updateRay(attached_node);
sim/src/sensors/MultiLevelLaserRangeFinder.cpp:    control->nodes->addNodeSensor(this);
sim/src/sensors/MultiLevelLaserRangeFinder.cpp:    bool erg = control->nodes->getDataBrokerNames(attached_node, &groupName, &dataName);
sim/src/sensors/MultiLevelLaserRangeFinder.cpp:    position = control->nodes->getPosition(attached_node);
sim/src/sensors/MultiLevelLaserRangeFinder.cpp:    orientation = control->nodes->getRotation(attached_node);
sim/src/sensors/RotatingRaySensor.cpp:      bool erg = control->nodes->getDataBrokerNames(attached_node, &groupName, &dataName);
sim/src/sensors/RotatingRaySensor.cpp:      position = control->nodes->getPosition(attached_node);
sim/src/sensors/RotatingRaySensor.cpp:      orientation = control->nodes->getRotation(attached_node);
sim/src/sensors/RotatingRaySensor.cpp:      control->nodes->addNodeSensor(this);
sim/src/sensors/RotatingRaySensor.cpp:        control->nodes->updateRay(attached_node);
sim/src/core/Simulator_item_back.cpp:      control->nodes->setVisualRep(0, cfgVisRep.iValue);
sim/src/core/Simulator_item_back.cpp:      control->nodes->updateDynamicNodes(calc_ms); //Moved update to here, otherwise RaySensor is one step behind the world every time
sim/src/core/Simulator_item_back.cpp:      control->nodes->clearAllNodes(clear_all);
sim/src/core/Simulator_item_back.cpp:      control->nodes->reloadNodes();
sim/src/core/Simulator_item_back.cpp:      control->nodes->scaleReloadNodes(x, y, z);
sim/src/core/Simulator_item_back.cpp:        control->nodes->setVisualRep(0, _property.iValue);
sim/src/core/NodeManager.cpp:      for (iter = nodes->begin(); iter != nodes->end(); iter++) {
sim/src/core/NodeManager.cpp:          nodes->erase(iter);
sim/src/core/NodeManager.cpp:      for (iter = nodes->begin(); iter != nodes->end(); iter++) {
sim/src/core/NodeManager.cpp:          nodes->erase(iter);
sim/src/core/NodeManager.cpp:        for(nter = nodes->begin(); nter != nodes->end(); nter++) {
sim/src/core/NodeManager.cpp:            nodes->erase(nter);
sim/src/core/NodeManager.cpp:              nodes->find((*iter)->getAttachedNode2()->getID()) != nodes->end()) {
sim/src/core/NodeManager.cpp:            nodes->erase(nodes->find((*iter)->getAttachedNode2()->getID()));
sim/src/core/NodeManager.cpp:          if(nodes->find((*iter)->getAttachedNode1()->getID()) != nodes->end()) {
sim/src/core/NodeManager.cpp:            nodes->erase(nodes->find((*iter)->getAttachedNode1()->getID()));
sim/src/core/NodeManager.cpp:      for (iter = nodes->begin(); iter != nodes->end(); iter++) {
sim/src/core/NodeManager.cpp:          nodes->erase(iter);
sim/src/core/NodeManager.cpp:      for (iter = nodes->begin(); iter != nodes->end(); iter++) {
sim/src/core/NodeManager.cpp:          nodes->erase(iter);
sim/src/core/Simulator.cpp:      control->nodes->setVisualRep(0, cfgVisRep.iValue);
sim/src/core/Simulator.cpp:      //control->nodes->updateDynamicNodes(calc_ms); //Moved update to here, otherwise RaySensor is one step behind the world every time
sim/src/core/Simulator.cpp:      control->nodes->clearAllNodes(clear_all, reloadGraphics);
sim/src/core/Simulator.cpp:      control->nodes->reloadNodes(reloadGraphics);
sim/src/core/Simulator.cpp:      control->nodes->scaleReloadNodes(x, y, z);
sim/src/core/Simulator.cpp:        control->nodes->setVisualRep(0, _property.iValue);
sim/src/core/Controller.cpp:                control->nodes->setPosition(command_id, pos);
sim/src/core/Controller.cpp:                control->nodes->setRotation(command_id, q_rot);
sim/src/core/Controller.cpp:                control->nodes->applyForce(command_id, force);
sim/src/core/Controller.cpp:                control->nodes->applyForce(command_id, force, pos);
sim/src/core/Controller.cpp:                control->nodes->setContactParamMotion1(command_id,
sim/src/core/Controller.cpp:                control->nodes->setReloadExtent(command_id, pos);
sim/src/core/Controller.cpp:                control->nodes->setReloadPosition(command_id, pos);
sim/src/core/Controller.cpp:                control->nodes->setReloadAngle(command_id, rot);
sim/src/core/Controller.cpp:                control->nodes->setVelocity(command_id, pos);
sim/src/core/Controller.cpp:                control->nodes->setAngularVelocity(command_id, pos);
sim/src/core/Controller.cpp:                control->nodes->setReloadFriction(command_id, pos.x(), pos.y());
sim/src/core/Controller.cpp:                control->nodes->setReloadQuaternion(command_id, q_rot);
sim/src/core/Controller.cpp:                  control->nodes->setPosition(id, pos);
sim/src/core/Controller.cpp:                  control->nodes->setVelocity(id, vel);
sim/src/core/Controller.cpp:                  control->nodes->setRotation(id, q_rot);
sim/src/core/Controller.cpp:                  control->nodes->setContactParams(id, cp_tmp);
sim/src/core/Controller.cpp:                  control->nodes->setAngularDamping(id, value);
sim/src/core/JointManager.cpp:      node1 = control->nodes->getSimNode(jointS->nodeIndex1);
sim/src/core/JointManager.cpp:      node2 = control->nodes->getSimNode(jointS->nodeIndex2);
sim/src/core/SimEntity.cpp://            control->nodes->removeNode(*it);
sim/src/core/SimJoint.cpp:          control->nodes->rotateNode(snode2->getID(), pivot, q, sJoint.index);
sim/src/core/SimJoint.cpp:          control->nodes->positionNode(snode2->getID(), pos2, sJoint.index);
gui/src/NodeSelectionTree.cpp:      control->nodes->getListNodes(&simNodes);
gui/src/NodeSelectionTree.cpp:        int draw_id = control->nodes->getDrawID(simNodes[i].index);
gui/src/NodeSelectionTree.cpp:      vector<unsigned long> children = control->nodes->getConnectedNodes(id);
gui/src/NodeSelectionTree.cpp:      control->nodes->getListNodes(&simNodes);
gui/src/NodeSelectionTree.cpp:      control->nodes->getListNodes(&simNodes);
gui/src/NodeSelectionTree.cpp:          control->graphics->setDrawObjectSelected(control->nodes->getDrawID(node_id), mode);
gui/src/NodeSelectionTree.cpp:        int draw_id = control->nodes->getDrawID(simNodes[i].index);
gui/src/NodeHandler.cpp:      control->nodes->getListNodes(&allNodes);
gui/src/NodeHandler.cpp:              node = control->nodes->getFullNode(allNodes[i].index);
gui/src/NodeHandler.cpp:          control->nodes->getNodeExchange(node.index, &posnode);
gui/src/NodeHandler.cpp:          parentNode = control->nodes->getFullNode(node.relative_id);
gui/src/NodeHandler.cpp:        if ((control->nodes->addNode(&node)) == 0) {
gui/src/NodeHandler.cpp:          control->nodes->addTerrain(&terrain);
gui/src/NodeHandler.cpp:        myRelNode = control->nodes->getFullNode(allNodes[relative_pos->
gui/src/NodeHandler.cpp:      control->nodes->editNode(&node, changes);
gui/src/NodeHandler.cpp:        myRelNode = control->nodes->getFullNode(allNodes[relative_pos->
gui/src/NodeHandler.cpp:      control->nodes->editNode(&node, changes);
gui/src/NodeHandler.cpp:      control->nodes->editNode(&node, changes);
gui/src/NodeHandler.cpp:      control->nodes->getListNodes(&allNodes);
gui/src/NodeHandler.cpp:      control->nodes->editNode(&node, changes);
gui/src/NodeHandler.cpp:      control->nodes->editNode(&node, changes);
gui/src/NodeHandler.cpp:      control->nodes->editNode(&node, changes);
gui/src/ControllerHandler.cpp:      //  sensors->setEnabled(false); motors->setEnabled(false); nodes->setEnabled(false);
gui/src/ControllerHandler.cpp:      control->nodes->getListNodes(&myNodes);
gui/src/ControllerHandler.cpp:      nodes->setValue(list);
gui/src/JointHandler.cpp:      control->nodes->getListNodes(&allNodes);
gui/src/dialogs/DialogJoints.cpp:      if (control->nodes->getNodeCount() == 0) {
gui/src/dialogs/Dialog_Add_Force.cpp:      control->nodes->getListNodes(this->getNodeListPtr());
gui/src/dialogs/Dialog_Add_Force.cpp:      control->nodes->applyForce(myNodes[index].index, forcevec);
gui/src/dialogs/DialogMotors.cpp:      if (control->nodes->getNodeCount() == 0 || 
gui/src/dialogs/Dialog_Add_Torque.cpp:      control->nodes->getListNodes(this->getNodeListPtr());
gui/src/dialogs/Dialog_Add_Torque.cpp:      control->nodes->applyTorque(myNodes[index].index, torquevec);
gui/src/dialogs/DialogNodes.cpp:      control->nodes->getListNodes(&allNodes);
gui/src/dialogs/DialogNodes.cpp:          control->nodes->removeNode(allNodes[i].index);
gui/src/dialogs/DialogNodes.cpp:      control->nodes->getListNodes(&allNodes);
gui/src/dialogs/CameraConfig/CameraConfiguratorGUI.cpp:      control->nodes->getListNodes(&objectList);
gui/src/dialogs/CameraConfig/CameraConfig.cpp:        unsigned long id = control->nodes->getDrawID(node_id);
gui/src/dialogs/CameraConfig/CameraConfig.cpp:        control->nodes->getDataBrokerNames(this->node_id, &groupName, &dataName);
gui/src/dialogs/CameraConfig/CameraConfig.cpp:          control->nodes->getDataBrokerNames(node_id, &groupName, &dataName);
gui/src/dialogs/CameraConfig/CameraConfig.cpp:        control->nodes->getDataBrokerNames(node_id, &groupName, &dataName);
gui/src/dialogs/CameraConfig/CameraConfig.cpp:      control->nodes->getDataBrokerNames(node_id, &groupName, &dataName);
gui/src/dialogs/Dialog_Import_Mesh.cpp:        control->nodes->addNode(allNodes);
gui/src/dialogs/BlenderExportGUI.cpp:        control->nodes->exportGraphicNodesByID(filename->value().toString().toStdString());
gui/src/dialogs/BlenderExportGUI.cpp:        control->nodes->getListNodes(&objectList);
gui/src/dialogs/BlenderExportGUI.cpp:          theNode = control->nodes->getFullNode((*iter).index);
gui/src/dialogs/DialogDistance.cpp:      control->nodes->getListNodes(&simNodes);
gui/src/dialogs/DialogDistance.cpp:          control->nodes->getListNodes(&simNodes);
gui/src/dialogs/DialogDistance.cpp:        control->nodes->getNodeExchange(selectedNodes[0], &first);
gui/src/dialogs/DialogDistance.cpp:        control->nodes->getNodeExchange(selectedNodes[1], &second);
gui/src/dialogs/DialogDistance.cpp:        control->nodes->getNodeExchange(selectedNodes[0], &first);
gui/src/dialogs/DialogDistance.cpp:          interfaces::NodeData moveNode = control->nodes->getFullNode(second.index);
gui/src/dialogs/DialogDistance.cpp:          control->nodes->editNode(&moveNode, interfaces::EDIT_NODE_POS);
gui/src/dialogs/DialogJoystick.cpp:      control->nodes->getListNodes(&simNodes);
gui/src/dialogs/DialogJoystick.cpp:        node = control->nodes->getFullNode(selectedIds[i]);
gui/src/dialogs/DialogJoystick.cpp:        control->nodes->editNode(&node, changes);
gui/src/menus/MenuSimulation.cpp:      if (control->nodes->getNodeCount() > 0) {
gui/src/menus/MenuSimulation.cpp:      if (control->nodes->getNodeCount() > 0) {
gui/src/menus/MenuSimulation.cpp:      if (control->nodes->getNodeCount() > 0) {
gui/src/SensorHandler.cpp:      control->nodes->getListNodes(&myNodes);
gui/src/Widget_Node_State.cpp:        control->nodes->getDataBrokerNames(actualNode, &groupName, &dataName);
gui/src/Widget_Node_State.cpp:      control->nodes->getDataBrokerNames(index, &groupName, &dataName);
entity_generation/smurf/src/smurf.cpp:      nextGroupID = control->nodes->getMaxGroupID() + 1;
entity_generation/smurf/src/smurf.cpp:      control->nodes->getNodeExchange(nodeid, &node);
entity_generation/smurf/src/smurf.cpp:      control->nodes->editNode(&my_node, EDIT_NODE_POS | EDIT_NODE_MOVE_ALL);
entity_generation/smurf/src/smurf.cpp:      control->nodes->editNode(&my_node, EDIT_NODE_ROT | EDIT_NODE_MOVE_ALL);
entity_generation/smurf/src/smurf.cpp:        node.groupID = control->nodes->getMaxGroupID() + 1;
entity_generation/smurf/src/smurf.cpp:        NodeId newId = control->nodes->addNode(&node);
entity_generation/smurf/src/smurf.cpp:      NodeId newId = control->nodes->addNode(&node);
plugins/Text3D/src/Text3D.cpp:          control->nodes->getDataBrokerNames(id, &groupName, &dataName);
plugins/obstacle_generator/src/ObstacleGenerator.cpp:	  control->nodes->setPosition(*it, Vector(pos_x, pos_y, pos_z));
plugins/obstacle_generator/src/ObstacleGenerator.cpp:          control->nodes->removeNode(*it);
plugins/obstacle_generator/src/ObstacleGenerator.cpp:          control->nodes->getDataBrokerNames(id, &groupName, &dataName);
plugins/obstacle_generator/src/ObstacleGenerator.cpp:            control->nodes->addNode(&box, false);
plugins/obstacle_generator/src/ObstacleGenerator.cpp:            // control->nodes->createPrimitiveNode("incline", NODE_TYPE_BOX,
plugins/obstacle_generator/src/ObstacleGenerator.cpp:          control->nodes->addNode(&platform, false);
plugins/obstacle_generator/src/ObstacleGenerator.cpp:           control->nodes->addNode(&obstacle, false);
plugins/plugin_template/__project__/src/__project__.cpp:          control->nodes->getDataBrokerNames(id, &groupName, &dataName);
plugins/Plot3D/src/Plot3D.cpp:          control->nodes->getDataBrokerNames(id, &groupName, &dataName);
plugins/Plot3D/src/Plot3D.cpp:                  NodeId id = control->nodes->getID(nodeName);
plugins/Plot3D/src/Plot3D.cpp:                  control->nodes->getDataBrokerNames(id, &groupName,
plugins/connexion_plugin/ConnexionWidget.cpp:        control->nodes->getListNodes(&objectList);
plugins/connexion_plugin/ConnexionPlugin.cpp:          control->nodes->getNodeExchange(object_id, &node);
plugins/connexion_plugin/ConnexionPlugin.cpp:          control->nodes->editNode(&my_node, EDIT_NODE_POS | EDIT_NODE_MOVE_ALL);
plugins/connexion_plugin/ConnexionPlugin.cpp:          control->nodes->editNode(&my_node, EDIT_NODE_ROT | EDIT_NODE_MOVE_ALL);
plugins/constraint_plugin/src/NodeConstraint.cpp:        interfaces::NodeData n = control->nodes->getFullNode(nodeId);
plugins/constraint_plugin/src/NodeConstraint.cpp:          interfaces::NodeData rel = control->nodes->getFullNode(n.relative_id);
plugins/constraint_plugin/src/NodeConstraint.cpp:        interfaces::NodeData n = control->nodes->getFullNode(nodeId);
plugins/constraint_plugin/src/NodeConstraint.cpp:          interfaces::NodeData rel = control->nodes->getFullNode(n.relative_id);
plugins/constraint_plugin/src/NodeConstraint.cpp:            control->nodes->editNode(&n, interfaces::EDIT_NODE_POS);
plugins/constraint_plugin/src/NodeConstraint.cpp:            control->nodes->editNode(&n, interfaces::EDIT_NODE_POS);
plugins/constraint_plugin/src/NodeConstraint.cpp:            control->nodes->editNode(&n, interfaces::EDIT_NODE_POS);
plugins/constraint_plugin/src/NodeConstraint.cpp:            control->nodes->editNode(&n, interfaces::EDIT_NODE_ROT);
plugins/constraint_plugin/src/NodeConstraint.cpp:            control->nodes->editNode(&n, interfaces::EDIT_NODE_ROT);
plugins/constraint_plugin/src/NodeConstraint.cpp:            control->nodes->editNode(&n, interfaces::EDIT_NODE_ROT);
plugins/constraint_plugin/src/NodeConstraint.cpp:            control->nodes->editNode(&n, interfaces::EDIT_NODE_SIZE);
plugins/constraint_plugin/src/NodeConstraint.cpp:            control->nodes->editNode(&n, interfaces::EDIT_NODE_SIZE);
plugins/constraint_plugin/src/NodeConstraint.cpp:            control->nodes->editNode(&n, interfaces::EDIT_NODE_SIZE);
plugins/constraint_plugin/src/ConstraintsPlugin.cpp:        n = control->nodes->getFullNode(nodeId);
plugins/constraint_plugin/src/ConstraintsPlugin.cpp:          rel = control->nodes->getFullNode(n.relative_id);
plugins/constraint_plugin/src/ConstraintsPlugin.cpp:        *nodeId = control->nodes->getID(nodeName);
plugins/test/__project__/src/__project__.cpp:          control->nodes->getDataBrokerNames(id, &groupName, &dataName);
plugins/test/src/Test.cpp:      //obj_id[0] = control->nodes->getID("box1");
plugins/test/src/Test.cpp:      //ps = control->nodes->getPosition(obj_id[0]);		
plugins/test/src/Test.cpp:        //pos = control->nodes->getPosition(1);        
